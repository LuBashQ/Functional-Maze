<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>LabProg2019</name></assembly>
<members>
<member name="T:LabProg2019.Prelude.Color">
<summary>
 Application-wide type alias for ConsoleColor.
</summary>
</member>
<member name="M:LabProg2019.Prelude.synced`1.apply_and_set(Microsoft.FSharp.Core.FSharpFunc{`0,`0})">
<summary>
 Apply the given function f to the synchronized value and modify it atomically.
</summary>
</member>
<member name="M:LabProg2019.Prelude.synced`1.apply``1(Microsoft.FSharp.Core.FSharpFunc{`0,``0})">
<summary>
 Apply the given function f to the synchronized value atomically.
</summary>
</member>
<member name="T:LabProg2019.Prelude.synced`1">
<summary>
 Access a shared value in a thread-safe synchronized way.
</summary>
</member>
<member name="M:LabProg2019.Prelude.ConsoleColor.of_rgb.Static(System.Byte,System.Byte,System.Byte)">
<summary>
 Calculates the nearest ConsoleColor to the given RGB triple.
</summary>
</member>
<member name="M:LabProg2019.Prelude.ConsoleColor.shade_by_brightness(System.ConsoleColor,System.Int32)">
<summary>
 Calculate a pair of Colors (foreground, backgroud) given a reference color and an integer representing the brightness in the range [0, 3].
</summary>
</member>
<member name="M:LabProg2019.Prelude.ConsoleColor.get_darken(System.ConsoleColor)">
<summary>
 Computes the dark version of a given Color.
</summary>
</member>
<member name="M:LabProg2019.Prelude.deg2rad(System.Double)">
<summary>
 Convert an angle a in degrees into radians.
</summary>
</member>
<member name="T:LabProg2019.Globals.remote_logger">
<summary>
 Type specialization for the log server.
</summary>
</member>
<member name="M:LabProg2019.Globals.logger.atomic_print(System.ConsoleColor,System.String)">
<summary>
 Internal low-level atomic print primitive.
</summary>
</member>
<member name="T:LabProg2019.Globals.logger">
<summary>
 Logger type.
</summary>
</member>
<member name="M:LabProg2019.Globals.toArray``1(``0[0:, 0:])">
 <summary>
 Converts a matrix into an array
 </summary>
 <param name="grid">The matrix</param>
 <returns>An array which contains all the elements of the matrix</returns>
</member>
<member name="M:LabProg2019.Globals.removeFromList``1(``0,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
 Removes an item from a list
 </summary>
 <param name="spr">The item to be removed</param>
 <param name="list">The list</param>
 <returns>A new list containing all the elements but the removed one</returns>
</member>
<member name="M:LabProg2019.Globals.checkMatrixBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Checks if the position given is inside a matrix or not
 </summary>
 <param name="x">x value</param>
 <param name="y">y value</param>
 <param name="W">Width of the matrix</param>
 <param name="H">Height of the matrix</param>
 <returns>True if x,y is inside the matrix, false otherwise</returns>
</member>
<member name="M:LabProg2019.Globals.rnd_color">
<summary>
 Generate a random ConsoleColor among the available system palette.
</summary>
</member>
<member name="M:LabProg2019.Globals.rnd_bool">
<summary>
 Generate a random boolean.
</summary>
</member>
<member name="M:LabProg2019.Globals.rnd_float(System.Double,System.Double)">
<summary>
 Generate a random float within the range [a, b].
</summary>
</member>
<member name="M:LabProg2019.Globals.rnd_int(System.Int32,System.Int32)">
<summary>
 Generate a random integer within the range [a, b].
</summary>
</member>
<member name="P:LabProg2019.Globals.Rnd">
<summary>
 Global PRNG instance.
</summary>
</member>
<member name="P:LabProg2019.Globals.Log">
<summary>
 Global logger instance.    
</summary>
</member>
<member name="M:LabProg2019.Gfx.raster.unsafe_blit(System.Int32,System.Int32,System.Int32,System.Int32,LabProg2019.Gfx.wronly_raster,System.Int32,System.Int32)">
<summary>
 Blit a rectangular region of pixels from this object as source to the destination raster.
 Expression src.unsafe_blit (x0, y0, w, h, dst, x1, y1) blits from source raster src to destination raster dst,
 copying the rectangular region with top-left corner at (x0, y0) and bottom-right corner at (x0 + w - 1, y0 + h -1) to destination coordinates (x1, y1).
</summary>
</member>
<member name="M:LabProg2019.Gfx.raster.get(System.Int32,System.Int32)">
<summary>
 Reads a pixel value at the given coordinates.
</summary>
</member>
<member name="M:LabProg2019.Gfx.clamp(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Calculates the intersection between the two given rectangles.
</summary>
</member>
<member name="M:LabProg2019.Cell.Cell.neighbors(LabProg2019.Cell.Cell[0:, 0:])">
 <summary>
 Checks and return the possible cell neighbours
 </summary>
 <param name="maze">Cell matrix</param>
 <returns>A Cell list containing cell neighbours</returns>
</member>
<member name="M:LabProg2019.Cell.Cell.children(LabProg2019.Cell.Cell[0:, 0:],LabProg2019.Cell.Cell)">
 <summary>
 Checks and return the possible cell children (non-wall neighbouring cells)
 </summary>
 <param name="maze">Cell matrix</param>
 <param name="parent">Parent cell</param>
 <returns>A Cell list containing the cell's sons</returns>
</member>
<member name="T:LabProg2019.Cell.Cell">
 <summary>
 Type Cell
 </summary>
 <param name="_x">Cell x-coordinate</param>
 <param name="_y">Cell y-coordinate</param>
 <param name="_mazeW">Maze width</param>
 <param name="_mazeH">Maze height</param>
</member>
<member name="F:LabProg2019.Maze.Maze.yAxisPosition">
<summary>Returns a valid column for the creation of the exit</summary>
</member>
<member name="M:LabProg2019.Maze.Maze.toSprite(System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Converts a pixel array into a sprite
 </summary>
 <param name="t">The index of the operation</param>
 <param name="visibility">The visibility of the game</param>
 <returns>A sprite containing the maze</returns>
</member>
<member name="M:LabProg2019.Maze.Maze.initialize">
 <summary>
 "recursive backtracker" algorithm implementation, take from
  https://en.wikipedia.org/wiki/Maze_generation_algorithm
 </summary>
 <exception cref="InvalidInsertionException">
 It is raised when current and next cell has neither abscissa nor ordinate in common
 </exception>
</member>
<member name="M:LabProg2019.Maze.Maze.getAreas(System.Int32)">
 <summary>
 Creates the area of visibility during an hardore game
 </summary>
 <param name="visibility">The area of visibility</param>
 <returns>A tuple representing the directly visible area, the slighty and almost completely out of sight cells</returns>
</member>
<member name="M:LabProg2019.Maze.Maze.generate">
 <summary>
 Generetes and set maze entry and exit
 </summary>
</member>
<member name="M:LabProg2019.Maze.Maze.convertToPixel">
 <summary>
 Converts a cell matrix into array of CharInfo
 </summary>
 <returns>An array of CharInfo</returns>
</member>
<member name="M:LabProg2019.Maze.Maze.convertAreaToPixel(System.Int32)">
 <summary>
 Converts a cell matrix into array of CharInfo, based on a certain visibility
 </summary>
 <param name="visibility">The area of visibility</param>
 <returns>An array of CharInfo</returns>
</member>
<member name="T:LabProg2019.Maze.Maze">
 <summary>
 Type Maze
 </summary>
 <param name="width">Maze width</param>
 <param name="heigth">Maze height</param>
</member>
<member name="T:LabProg2019.TreeMaze.Tree">
 <summary>
 Type Tree
 </summary>
 <param name="parent">Parent node</param>
 <param name="value">Cell in the node</param>
 <param name="children">Cell children</param>
</member>
<member name="M:LabProg2019.TreeMaze.solveRecursive(LabProg2019.Maze.Maze)">
 <summary>
 Recursive solving algorithm for the maze, using n-ary tree
 </summary>
 <param name="maze">Maze data structure</param>
 <returns>Modified maze data structure</returns>
</member>
<member name="M:LabProg2019.TreeMaze.findHierarchy(LabProg2019.Maze.Maze,System.Collections.Generic.Queue{LabProg2019.TreeMaze.Tree})">
 <summary>
 Depth first searching algorithm on an n-ary tree, used to generate the hierarchy parent-child
 </summary>
 <param name="maze">Maze data structure</param>
 <param name="queue">A tail</param>
 <returns>The leaf corresponding to the maze exit</returns>
</member>
<member name="M:LabProg2019.TreeMaze.solveIterative(LabProg2019.Maze.Maze)">
 <summary>
 Iterative solving algotihm based on an n-ary tree data structure and breath first search
 </summary>
 <param name="maze">Maze data structure</param>
 <returns>Maze modified data structure</returns>
</member>
<member name="M:LabProg2019.TreeMaze.buildPath(Microsoft.FSharp.Core.FSharpOption{LabProg2019.TreeMaze.Tree},LabProg2019.Maze.Maze)">
 <summary>
 Modifies the matrix cells to mark the path
 </summary>
 <param name="root">Tree root</param>
 <param name="maze">Maze data structure</param>
 <returns>Modified maze data structure</returns>
</member>
<member name="M:LabProg2019.TreeMaze.retrievePath(Microsoft.FSharp.Core.FSharpOption{LabProg2019.TreeMaze.Tree})">
 <summary>
 Gets recursively all parent cell of the maze exit leaf
 </summary>
 <param name="leaf">Tree leaf</param>
 <returns>The solution's path</returns>
</member>
<member name="M:LabProg2019.TreeMaze.getChildren(LabProg2019.TreeMaze.Tree,LabProg2019.Cell.Cell[0:, 0:])">
 <summary>
 Gets all children of a tree node
 </summary>
 <param name="node">Tree node</param>
 <param name="maze">Matrix that identify the maze</param>
</member>
<member name="M:LabProg2019.Actions.State.move(System.ConsoleKeyInfo,Microsoft.FSharp.Core.FSharpOption{LabProg2019.Gfx.wronly_raster},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}})">
 <summary>
 Executes the state's assigned action
 </summary>
 <param name="k">Pressed key</param>
 <param name="r">Write only raster used for screen writing</param>
 <param name="s">Menu items list</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="P:LabProg2019.Actions.State.text">
 <summary>
 Gets the state's menu voices
 </summary>
 <returns>A string list representing menu items</returns>
</member>
<member name="P:LabProg2019.Actions.State.size">
 <summary>
 Window size
 Gets the maze's game size for Game or the window's size for Menu and Text
 </summary>
 <returns>A couple of int representing the size</returns>
</member>
<member name="P:LabProg2019.Actions.State.position">
 <summary>
 Gets the the state's text position
 </summary>
 <returns>A couple of int representing the text position</returns>
</member>
<member name="P:LabProg2019.Actions.State.player">
 <summary>
 Gets the state's player
 </summary>
 <returns>A sprite indicating the state player</returns>
</member>
<member name="P:LabProg2019.Actions.State.name">
 <summary>
 Gets the state's name
 </summary>
 <returns>A string with state name</returns>
</member>
<member name="P:LabProg2019.Actions.State.maze">
 <summary>
 Gets the state's maze data structure
 </summary>
 <returns>Maze data structure of the state</returns>
</member>
<member name="P:LabProg2019.Actions.State.background">
 <summary>
 Gets the state's background
 </summary>
 <returns>A sprite indicating background state</returns>
</member>
<member name="P:LabProg2019.Actions.State.active">
 <summary>
 Gets the state's active menu voice
 </summary>
 <returns>A int indicating the menu voice</returns>
</member>
<member name="T:LabProg2019.Actions.State">
 <summary>
 Discriminated union of Game and Menu that represent the game main data structure
 </summary>
 <param name="name">State name</param>
 <param name="pg">State player</param>
 <param name="bg">State background</param>
 <param name="move">The function to execute at every cycle of execution </param>
 <param name="maze">Maze data stucture/param>
 <param name="size">Window or maze size</param>
 <param name="voices">List with menu items</param>
 <param name="active">A value that indicate the cursor postion in the menu</param>
</member>
<member name="M:LabProg2019.Actions.showSolution(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Shows the current maze solution
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.showMenu(LabProg2019.Actions.State,System.ConsoleKeyInfo,LabProg2019.Gfx.wronly_raster,Microsoft.FSharp.Collections.FSharpList{System.String},System.Int32,System.Int32)">
 <summary>
 Writes in the game console
 </summary>
 <param name="s"String to write</param>
 <param name="index">Index indicating menu item</param>
 <param name="wr">Write only raster used for screen writing</param>
 <param name="size">Game window size</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.solveMaze(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Generates a new solved maze
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.generateHardcoreMaze(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Generates a new maze with limited visibility
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.generateMaze(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Generates a new maze
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.hardModeMove(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Moves the sprite according to the key pressed and draws the corresponding subregion of the maze
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.drawSubRegion(LabProg2019.Actions.State)">
 <summary>
 Draws a portion of the screen based on the visibility range
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.movePlayer(LabProg2019.Actions.State,System.ConsoleKeyInfo)">
 <summary>
 Moves the sprite according to the key pressed
 </summary>
 <param name="st">Current state</param>
 <param name="key">Key pressed</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.Actions.showText(LabProg2019.Actions.State,System.ConsoleKeyInfo,LabProg2019.Gfx.wronly_raster,Microsoft.FSharp.Collections.FSharpList{System.String},System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Draws all menu voices of a given state
 </summary>
 <param name="st">The given state</param>
 <param name="key">The pressed key</param>
 <param name="wr">Write only raster used for screen writing</param>
 <param name="ls">the list of menu voices to be written</param>
 <param name="size">Game window size</param>
 <param name="pos">The position that marks be beginning of the word</param>
 <returns>A new state with the modified index</returns>
</member>
<member name="M:LabProg2019.Actions.drawText(System.String,System.Int32,System.ConsoleColor,LabProg2019.Gfx.wronly_raster,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Writes the state's text message
 </summary>
 <param name="s">The string to write</param>
 <param name="index">The index of the item in the menu</param>
 <param name="wr">Write only raster used for screen writing</param>
 <param name="size">Game window size</param>
</member>
<member name="M:LabProg2019.Actions.drawMenuText(System.String,System.Int32,System.ConsoleColor,LabProg2019.Gfx.wronly_raster,System.Int32,System.Int32)">
 <summary>
 Writes the state's menu voices
 </summary>
 <param name="s">The string to write</param>
 <param name="index">The index of the item in the menu</param>
 <param name="wr">Write only raster used for screen writing</param>
 <param name="size">Game window size</param>
</member>
<member name="M:LabProg2019.Actions.check_bounds(LabProg2019.Actions.State,System.Double,System.Double)">
 <summary>
 Checks if the movement is allowed
 </summary>
 <param name="st">Current state</param>
 <param name="dx">Horizontal displacement</param>
 <param name="dy">Vertical displacement</param>
 <returns>A couple of float indicating the action to execute</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.setVisiblity(LabProg2019.Actions.State,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Changes the radius of visible maze (in hard mode)
 </summary>
 <param name="s">Current status</param>
 <param name="visibility">New visibility value</param>
 <param name="pos">Position of the sprite</param>
 <returns>A new state, that comes from the changes on the actual state</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.setSize(LabProg2019.Actions.State,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Changes maze size
 </summary>
 <param name="s">Current state</param>
 <param name="size">New size</param>
 <param name="pos">Cursor position in the menu</param>
 <returns>New state with modified size</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.setGameVisibility(System.Int32,System.Int32)">
 <summary>
 Changes the visibility of all game states
 </summary>
 <param name="v">New visibility value</param>
 <param name="pos">Position of the sprite</param>
</member>
<member name="M:LabProg2019.StateManager.StateManager.setGameSize(System.Int32,System.Int32)">
 <summary>
 Sets new size to all game states
 </summary>
 <param name="size">New size</param>
 <param name="pos">New cursor position in the menu</param>
</member>
<member name="M:LabProg2019.StateManager.StateManager.setCurrentState(System.String)">
 <summary>
 Sets the current state
 </summary>
 <param name="name">State name</param>
</member>
<member name="M:LabProg2019.StateManager.StateManager.resetState(LabProg2019.Actions.State)">
 <summary>
 Resets a state
 </summary>
 <param name="s">Current state</param>
 <returns>A new default state</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.resetGame">
 <summary>
 Resets all game states
 </summary>
</member>
<member name="M:LabProg2019.StateManager.StateManager.isPresent(System.String)">
 <summary>
 Checks for the if exists a state in the game states list
 </summary>
 <param name="name">State name</param>
 <returns>A boolean that express the research result</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.getState(System.String)">
 <summary>
 Searches a state in the game states list
 </summary>
 <param name="name">State name</param>
 <returns>A list with the requested state</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.execute(LabProg2019.Engine.engine,Microsoft.FSharp.Core.FSharpOption{System.ConsoleKeyInfo},LabProg2019.Gfx.wronly_raster)">
 <summary>
 Checks the pressed key and execute the corresponding action 
 </summary>
 <param name="engine">Game engine</param>
 <param name="key">Pressed key</param>
 <param name="wr">Write only raster used for screen writing</param>
</member>
<member name="M:LabProg2019.StateManager.StateManager.deleteState(System.String)">
 <summary>
 Removes a state form the game states list 
 </summary>
 <param name="name">The state name</param>
 <returns>A list with all game states without the removed one</returns>
</member>
<member name="M:LabProg2019.StateManager.StateManager.changeScene(System.String,Microsoft.FSharp.Core.FSharpOption{LabProg2019.Gfx.wronly_raster})">
 <summary>
 Changes the current scene
 </summary>
 <param name="name">State name</param>
</member>
<member name="M:LabProg2019.StateManager.StateManager.addScene(System.String,Microsoft.FSharp.Core.FSharpFunc{LabProg2019.Actions.State,Microsoft.FSharp.Core.FSharpFunc{System.ConsoleKeyInfo,LabProg2019.Actions.State}},System.Boolean,Microsoft.FSharp.Core.FSharpOption{LabProg2019.Gfx.sprite},Microsoft.FSharp.Core.FSharpOption{LabProg2019.Gfx.sprite},Microsoft.FSharp.Core.FSharpOption{LabProg2019.Maze.Maze},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{LabProg2019.Actions.State,Microsoft.FSharp.Core.FSharpFunc{System.ConsoleKeyInfo,Microsoft.FSharp.Core.FSharpFunc{LabProg2019.Gfx.wronly_raster,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Core.FSharpFunc{System.Tuple{System.Int32,System.Int32},LabProg2019.Actions.State}}}}}},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Int32,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
 Adds a new state to game states list
 </summary>
 <param name="name">State name</param>
 <param name="move">The function to execute at every cycle of execution (Game only)</param>
 <param name="game">Value that express if state is Game or Menu</param>
 <param name="bg">Background state</param>
 <param name="pg">Player state</param>
 <param name="name">State name</param>
 <param name="maze">Data structure representing the maze</param>
 <param name="voices">Menu elements</param>
 <param name="active">Cursor position in menu</param>
 <param name="menu">The function to execute at every cycle of execution (Menu only)</param>
 <param name="size">Window or maze size</param>
</member>
<member name="T:LabProg2019.StateManager.StateManager">
 <summary>
 Type SceneManager
 </summary>
 <param name="_gameStates">Game supported states</param>
 <param name="_engine">Game engine</param>
</member>
</members>
</doc>
